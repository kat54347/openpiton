# Modified by Princeton University on April 3rd, 2016
# ========== Copyright Header Begin ==========================================
#
# OpenSPARC T1 Processor File: rsyn,1.0
# Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
#
# The above named program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License version 2 as published by the Free Software Foundation.
#
# The above named program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ========== Copyright Header End ============================================

#######################################################################
# Run LVS script
#
# rlvs -help for help
#######################################################################

use warnings;
use strict;
use Cwd;
use Cwd 'chdir';
use Getopt::Long;
use rcommon;
use File::Path qw(make_path);

$| = 1;

$SIG{__DIE__} = \&sighandler;

#######################################################################
# Global variables
#######################################################################

my $prg = $0;
$prg =~ s/.*\///;
$prg =~ s/,.*//;

my $all      = 0;
my $lvs_q    = "/bin/sh";
my $slurm    = 0;
my $scores   = "10";
my $stime    = "12:00:00";
my $swait    = 0;
my $process  = "gf14_invecas";
my $tool     = "calibre";
my $build_id = "";
my $blk_dir;

my @blocks     = ();
my @block_list = ();

#######################################################################
# Check command line options
#######################################################################

foreach my $argv (@ARGV) {
    if ( $argv =~ /-all/ ) {
        $all = 1;
    }
    elsif ( ( $argv =~ /-h/ ) or ( $argv =~ /-help/ ) ) {
        &usage;
        exit(0);
    }
    elsif ( $argv =~ /-slurm/ ) {
        $slurm = 1;
    }
    elsif ( $argv =~ /-scores/ ) {
        $scores = $argv;
        $scores =~ s/-scores=(.*)/$1/;
    }
    elsif ( $argv =~ /-stime/ ) {
        $stime = $argv;
        $stime =~ s/-stime=(.*)/$1/;
    }
    elsif ( $argv =~ /-process/ ) {
        $process = $argv;
        $process =~ s/-process=(.*)/$1/;
    }
    elsif ( $argv =~ /-tool/ ) {
        $tool = $argv;
        $tool =~ s/-tool=(.*)/$1/;
    }
    elsif ( $argv =~ /-build_id/ ) {
        $build_id = $argv;
        $build_id =~ s/-build_id=(.*)/$1/;
    }
    elsif ( $argv =~ /-swait/ ) {
        $swait = 1;
    }
    else {
        push @blocks, $argv;
    }
}

my $blk_list       = "$ENV{DV_ROOT}/asicflow/$process/block.list";
my $blocks_info    = process_blocks( $blk_list, $all, \@blocks );
my $count          = $blocks_info->{COUNT};
my $block_list_ref = $blocks_info->{MATCHES};
@block_list = @$block_list_ref;
if ($count) {
    print "$prg: Running LVS for $count modules\n";
}
else {
    print "$prg: No matching modules found.\n";
    &usage;
}

if ( $build_id eq "" ) {
    print "Please specify build_id\n";
    &usage;
}

my @job_ids = ();
foreach my $block (@block_list) {
    print "$prg: Running LVS for $block->{ID}\n";
    my $cmd = $lvs_q;
    $blk_dir = $ENV{DV_ROOT};
    $blk_dir
        .= "/asicflow/$process/specific/$block->{PATH}/asicflow/lvs/$tool/rlvs_${build_id}";
    print "$prg: Creating directory $blk_dir\n";
    make_path($blk_dir);
    chdir $blk_dir;
    `rm -rf lvsRun/calibre.lvs.log`;
    die("DIE. Could not remove calibre.lvs.log file.") if ($?);
    $cmd
        .= " $ENV{DV_ROOT}/tools/bin/lvs_command_$tool $process $build_id $block->{PATH}";

    if ( !$slurm ) {
        system($cmd);
    }
    else {
        my $block_fs = $block->{PATH};
        my $find     = "/";
        my $replace  = "_";
        $block_fs =~ s/$find/$replace/g;
        my $cmd_script = "lvs_";
        $cmd_script .= $block->{ID};

        create_slurm_script( $cmd_script, $cmd, $scores, $stime );

        my $job_id = submit_slurm_job( $prg, $cmd_script );
        push @job_ids, $job_id;
    }
}

if ( $slurm && $swait ) {
    print "$prg: Waiting for LVS jobs to finish...\n";
    wait_slurm_jobs( \@job_ids );
}

#######################################################################
sub usage {
    print "\n$prg : Run LVS for OpenPiton\n\n";
    print "Options are :\n";
    print "  -all \n\tto run LVS for all blocks\n";
    print "  -h / -help\n\tto print help\n";
    print "  -slurm \n\tto run using SLURM\n";
    print "    -scores='Number of cores to request' (default=12)\n";
    print "    -stime='Amount of time to request' (default=12:00:00)\n";
    print "    -swait\n\tto wait for LVS jobs to finish before returning\n";
    print "  -process='Your process node' (default=gf14_invecas)\n";
    print "  -tool='Your pnr tool' (default=calibre)\n";
    print "  -build_id='Your build ID' (default=rpar_Y_M_D_count)\n";
    print "  block_list :\n\tspecify list of blocks to place and route\n\n";
    print "Examples:\n\n";
    print "\t$prg -all\n\t$prg fpu_add\n\n";
}
#######################################################################
